{
	"info": {
		"_postman_id": "a1a9a263-d8d9-40e1-98aa-e7665616b132",
		"name": "Authors",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8035977"
	},
	"item": [
		{
			"name": "Get all authors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate status code returned when sending valid URL\", function () {\r",
							"   var statusCode=pm.response.code;\r",
							"   pm.expect(statusCode).to.be.equal(200); \r",
							"});\r",
							"\r",
							"pm.test(\"Validate status name returned when sending valid URL\", function () {\r",
							"   var statusName=pm.response.status;\r",
							"   pm.expect(statusName).to.be.equal(\"OK\"); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}v1/Authors",
					"host": [
						"{{BaseURL}}v1"
					],
					"path": [
						"Authors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add New Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate status code returned when sending valid request parameters\", function () {\r",
							"   var statusCode=pm.response.code;\r",
							"   pm.expect(statusCode).to.be.equal(200); \r",
							"});\r",
							"\r",
							"pm.test(\"Validate status name returned when sending valid request parameters\", function () {\r",
							"   var statusName=pm.response.status;\r",
							"   pm.expect(statusName).to.be.equal(\"OK\"); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1200,\r\n    \"idBook\": 500,\r\n    \"firstName\": \"New Author\",\r\n    \"lastName\": \"New Author\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}v1/Authors",
					"host": [
						"{{BaseURL}}v1"
					],
					"path": [
						"Authors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Book Id Information",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate that all book id returned equal to book id parameter\", function () {\r",
							"   var data = pm.response.json();\r",
							"var count = Object.keys(data).length;\r",
							"var i=0;\r",
							"var book=parseInt(pm.globals.get(\"bookId\"));\r",
							"//console.log(book)\r",
							"while(i<count)\r",
							"{\r",
							"    pm.expect(data[i].idBook).to.equal(book);\r",
							"    i++;\r",
							"}\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//console.log(pm.response.json()[count-1].idBook);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/v1/Authors/authors/books/{{bookId}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"v1",
						"Authors",
						"authors",
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate status code returned when sending valid author id\",function()\r",
							"{\r",
							"    var statusCode=pm.response.code;\r",
							"   pm.expect(statusCode).to.be.equal(200); \r",
							"} );\r",
							"\r",
							"pm.test(\"Validate that author id returned equal to author id parameter\", function () {\r",
							"   var data = pm.response.json();\r",
							"    pm.expect(data.id).to.equal(parseInt(pm.globals.get(\"authorId\")));\r",
							"    \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}v1/Authors/{{authorId}}",
					"host": [
						"{{BaseURL}}v1"
					],
					"path": [
						"Authors",
						"{{authorId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Author by author id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate status code returned when sending valid request with author id\",function()\r",
							"{\r",
							"    var statusCode=pm.response.code;\r",
							"   pm.expect(statusCode).to.be.equal(200); \r",
							"} );\r",
							"\r",
							"pm.test(\"Validate that response data received are relevant to author id\", function () {\r",
							"   var data = pm.response.json();\r",
							"   var integerAuthorId=parseInt(pm.globals.get(\"authorId\"));\r",
							"   var integerBookId=parseInt(pm.globals.get(\"bookId\"));\r",
							"   var firstName=pm.globals.get(\"firstName\");\r",
							"   var lastName=pm.globals.get(\"lastName\");\r",
							"    pm.expect(data.id).to.equal(integerAuthorId) && \r",
							"    pm.expect(data.idBook).to.equal(integerBookId)\r",
							"    pm.expect(data.firstName).to.equal(firstName)\r",
							"    pm.expect(data.lastName).to.equal(lastName);\r",
							"    \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{authorId}},\r\n    \"idBook\": {{bookId}},\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}v1/Authors/{{authorId}}",
					"host": [
						"{{BaseURL}}v1"
					],
					"path": [
						"Authors",
						"{{authorId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Recheck Author's data after update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json();\r",
							"var firstName=pm.globals.get(\"firstName\");\r",
							"var lastName=pm.globals.get(\"lastName\");\r",
							"pm.test(\"Check Author's information after updating it\", function () {\r",
							"    pm.expect(data.firstName).to.eql(firstName) \r",
							"    && pm.expect(data.lastName).to.eql(lastName) ;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}v1/Authors/{{authorId}}",
					"host": [
						"{{BaseURL}}v1"
					],
					"path": [
						"Authors",
						"{{authorId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete author by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate status code returned when sending request with author id\",function()\r",
							"{\r",
							"    var statusCode=pm.response.code;\r",
							"   pm.expect(statusCode).to.be.equal(200); \r",
							"} );"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}v1/Authors/100",
					"host": [
						"{{BaseURL}}v1"
					],
					"path": [
						"Authors",
						"100"
					]
				}
			},
			"response": []
		}
	]
}